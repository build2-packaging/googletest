# Public headers.
#
pub = [dir_path] ../include/gtest/

include $pub

pub_hdrs = $($pub/ pub_hdrs)

# Libraries.
#
./: lib{gtest} liba{gtest_main}

lib{gtest}: {hxx cxx}{* -gtest_main} $pub/{$pub_hdrs}

# Provide custom obja{} to avoid synthesized dependency on lib{gtest} and
# -DGTEST_LINKED_AS_SHARED_LIBRARY that it brings.
#
liba{gtest_main}: obja{gtest_main} lib{gtest}
obja{gtest_main}: cxx{gtest_main}

# Defines main() so link in the whole archive mode.
#
liba{gtest_main}: bin.whole = true

# Build options.
#
# Note that the source files include internal headers as "src/...".
#
src_pfx_inc = [dir_path] $src_root/include/
src_pfx_src = [dir_path] $src_root

cxx.poptions =+ "-I$src_pfx_src" "-I$src_pfx_inc"

{hbmis objs}{*}: cxx.poptions += -DGTEST_CREATE_SHARED_LIBRARY=1

# Need pthread on Unix systems (also export below).
#
if ($cxx.target.class != 'windows')
{
  cxx.poptions += -DGTEST_HAS_PTHREAD=1
  cxx.libs += -lpthread
}

# Export options.
#
lib{gtest}:
{
  cxx.export.poptions = "-I$src_pfx_inc"
  cxx.export.libs = ($cxx.target.class != 'windows' ? -lpthread : )
}

libs{gtest}: cxx.export.poptions += -DGTEST_LINKED_AS_SHARED_LIBRARY=1

liba{gtest_main}:
{
  cxx.export.poptions = "-I$src_pfx_inc"
  cxx.export.libs = lib{gtest}
}

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{gtest}: bin.lib.version = "-$version.project_id"
else
  lib{gtest}: bin.lib.version = "-$version.major.$version.minor"

# Don't install private headers.
#
hxx{*}: install = false
